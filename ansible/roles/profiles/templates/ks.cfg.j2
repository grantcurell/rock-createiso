# Determine what drives to use based on inventory file
{% if item is defined %}{% set boot_drive = hostvars[item].boot_drive %}{% else %}{% set boot_drive = default_boot_drive %}{% endif %}

#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use CDROM installation media
url --url http://{{ server_ip }}/{{ ansible_distribution }}
text
# Run the Setup Agent on first boot
firstboot --disable
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Disable Firewalld
firewall --enabled
# Disable SELinux
selinux --disabled
eula --agreed

#Reboot when its all over
reboot

# Network information
{% if item is defined %}
network --device={{ hostvars[item].mac | lower }} --bootproto=static --ip={{ hostvars[item].ip }} --netmask={{ netmask }} --gateway={{ gateway }} --nameserver={{ dns }} --noipv6 --activate
network  --hostname={{ item }}
{% else %}
network  --bootproto=dhcp --device=eth0 --noipv6 --activate
network  --hostname=localhost.localdomain
{% endif %}


# Root password
rootpw --iscrypted {{ rootpw.stdout }}
# System services
services --disabled="chronyd"
# System timezone
timezone {{ timezone }} --isUtc --nontp
# System bootloader configuration
bootloader --append="rhgb quiet crashkernel=auto" --location=mbr --boot-drive={{ boot_drive }}

# Partition clearing information
zerombr
clearpart --all
{% if uefi %}
part /boot/efi --fstype=efi --grow --maxsize=200 --size=20 --ondrive={{ boot_drive }}
{% endif %}
part /boot --fstype="xfs" --size=500 --ondrive={{ boot_drive }}
part pv.01 --size=1 --grow --ondrive={{ boot_drive }}
volgroup vg01 pv.01
logvol /  --fstype="xfs" --size=1 --name=root --vgname=vg01 --grow

%pre
list-harddrives | awk '{ print $1 }' > /tmp/disks
for disk in `cat /tmp/disks`;
do
echo 'wiping disk' $disk
wipefs -a -f /dev/$disk
dd if=/dev/zero of=/dev/$disk bs=4096k count=100
done
%end

%packages
@^minimal
@core
kexec-tools
pciutils
-NetworkManager-wifi

%end

%post --log=/root/ks-post.log
/usr/sbin/grubby --update-kernel=ALL --args=console=ttyS0
{% if item is defined %}
ip addr | grep -i broadcast | awk '{ print $2 }' > /tmp/interfaces
sed -i 's/:/\ /g' /tmp/interfaces
interfaces=`cat /tmp/interfaces`
for i in $interfaces;
do
 mac=`ethtool -P $i | awk '{ print $3 }'`
 if [[ $mac != '{{ hostvars[item].mac | lower }}' ]]; then
   # This updates the non management interfaces to remove any DNS entries
   sed -i '/^DNS/ d' /etc/sysconfig/network-scripts/ifcfg-$i
   # This updates the non management interfaces to remove the NETBOOT line
   sed -i '/^NETBOOT/ d' /etc/sysconfig/network-scripts/ifcfg-$i
   # This updates the non management interfaces to manual  
   sed -i 's/^\(BOOTPROTO=\).*/\1none/g' /etc/sysconfig/network-scripts/ifcfg-$i
   # This updates the non management interfaces to ignore ipv6 by default   
   sed -i 's/^\(IPV6INIT=\).*/\1no/g' /etc/sysconfig/network-scripts/ifcfg-$i
   # Remove ONBOOT line from non management interface
   sed -i '/^ONBOOT/ d' /etc/sysconfig/network-scripts/ifcfg-$i
   # Append ONBOOT option based on link status of yes or no
   echo 'ONBOOT=yes' >> /etc/sysconfig/network-scripts/ifcfg-$i
   # Add default 169 ip to monitoring interface
   sed -i '/^NETMASK/ d' /etc/sysconfig/network-scripts/ifcfg-$i
   echo 'NETMASK=255.255.0.0' >> /etc/sysconfig/network-scripts/ifcfg-$i
   # Add default 169 ip to monitoring interface
   sed -i '/^IPADDR/ d' /etc/sysconfig/network-scripts/ifcfg-$i
   echo 'IPADDR=169.254.0.1' >> /etc/sysconfig/network-scripts/ifcfg-$i
 fi
done
{% endif %}
%end

%post
# Disable SSHD DNS lookups
echo "UseDNS no" >> /etc/ssh/sshd_config
%end
